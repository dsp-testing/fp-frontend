    access_by_lua_block {
        local app_callback_path = "${APP_CALLBACK_PATH}"
        local app_login_path = "${APP_LOGIN_PATH}"
        local app_path_prefix = "${APP_PATH_PREFIX}"
        local callback_host = "https://" .. ngx.var.host

        if ngx.var.host == "localhost" then
            callback_host = "http://localhost:" .. ngx.var.server_port
        end

        local opts = {
            redirect_uri = callback_host .. app_callback_path,
            client_id = "${OIDC_AGENTNAME}",
            client_secret = "${OIDC_PASSWORD}",
            scope = "openid",
            ssl_verify = "no",
            token_endpoint_auth_method = "client_secret_basic",
            discovery = "${OIDC_HOST_URL}" .. "/oauth2/.well-known/openid-configuration",
            session_contents = {
                enc_id_token = true
            }
        }

        -- starting session manual to set some default cookies.
        local session = require("resty.session").start()
        if ngx.var.cookie_ADRUM and ngx.var.cookie_ADRUM ~= session.data.ADRUM then
            session.data.ADRUM = ngx.var.cookie_ADRUM
        end

        local res, err = require("resty.openidc").authenticate(opts, nil, nil, session)

        if err then
            ngx.status = 500
            ngx.say(err)
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
        end

        if ngx.var.uri == app_callback_path or ngx.var.uri == app_login_path then
            return ngx.redirect(app_path_prefix)
        end

        local proxy_cookie = {}
        -- adding ADRUM cookie if existant
        if session.data.ADRUM then
            proxy_cookie.ADRUM = session.data.ADRUM
        end

        if ngx.var.cookie_ADRUM then
            proxy_cookie.ADRUM = ngx.var.cookie_ADRUM
        end

        -- adding ID_token if logged in
        if session.data.enc_id_token then
            proxy_cookie.ID_token = session.data.enc_id_token
        end

        -- pass ADRUM(EUM) cookie if present
        local proxy_cookie_string = ""
        for k,v in pairs(proxy_cookie) do
            proxy_cookie_string = proxy_cookie_string .. k .. "=" .. v ..";"
        end
        ngx.var.proxy_cookie = proxy_cookie_string
    }



    header_filter_by_lua_block {
        local session = require("resty.session").open()
        if session.data.enc_id_token and ngx.var.cookie_ADRUM and ngx.var.cookie_ADRUM ~= session.data.ADRUM then
            session.data.ADRUM = ngx.var.cookie_ADRUM
            session:save()
        end
    }